{"ast":null,"code":"'use strict';\n\nlet {\n  dirname,\n  resolve,\n  relative,\n  sep\n} = require('path');\n\nlet {\n  pathToFileURL\n} = require('url');\n\nlet {\n  SourceMapConsumer,\n  SourceMapGenerator\n} = require('source-map');\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);\nlet pathAvailable = Boolean(dirname && resolve && relative && sep);\n\nclass MapGenerator {\n  constructor(stringify, root, opts) {\n    this.stringify = stringify;\n    this.mapOpts = opts.map || {};\n    this.root = root;\n    this.opts = opts;\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map;\n    }\n\n    return this.previous().length > 0;\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = [];\n      this.root.walk(node => {\n        if (node.source && node.source.input.map) {\n          let map = node.source.input.map;\n\n          if (!this.previousMaps.includes(map)) {\n            this.previousMaps.push(map);\n          }\n        }\n      });\n    }\n\n    return this.previousMaps;\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline;\n    }\n\n    let annotation = this.mapOpts.annotation;\n\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false;\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline);\n    }\n\n    return true;\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent;\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent());\n    }\n\n    return true;\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return;\n    let node;\n\n    for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n      node = this.root.nodes[i];\n      if (node.type !== 'comment') continue;\n\n      if (node.text.indexOf('# sourceMappingURL=') === 0) {\n        this.root.removeChild(i);\n      }\n    }\n  }\n\n  setSourcesContent() {\n    let already = {};\n    this.root.walk(node => {\n      if (node.source) {\n        let from = node.source.input.from;\n\n        if (from && !already[from]) {\n          already[from] = true;\n          this.map.setSourceContent(this.toUrl(this.path(from)), node.source.input.css);\n        }\n      }\n    });\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file));\n      let root = prev.root || dirname(prev.file);\n      let map;\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text);\n\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null);\n        }\n      } else {\n        map = prev.consumer();\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)));\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true;\n    }\n\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation;\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation);\n    }\n\n    return true;\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64');\n    } else {\n      // istanbul ignore next\n      return window.btoa(unescape(encodeURIComponent(str)));\n    }\n  }\n\n  addAnnotation() {\n    let content;\n\n    if (this.isInline()) {\n      content = 'data:application/json;base64,' + this.toBase64(this.map.toString());\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation;\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root);\n    } else {\n      content = this.outputFile() + '.map';\n    }\n\n    let eol = '\\n';\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n';\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */';\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to);\n    }\n\n    if (this.opts.from) {\n      return this.path(this.opts.from);\n    }\n\n    return 'to.css';\n  }\n\n  generateMap() {\n    this.generateString();\n    if (this.isSourcesContent()) this.setSourcesContent();\n    if (this.previous().length > 0) this.applyPrevMaps();\n    if (this.isAnnotation()) this.addAnnotation();\n\n    if (this.isInline()) {\n      return [this.css];\n    }\n\n    return [this.css, this.map];\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file;\n    if (/^\\w+:\\/\\//.test(file)) return file;\n    if (this.mapOpts.absolute) return file;\n    let from = this.opts.to ? dirname(this.opts.to) : '.';\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation));\n    }\n\n    file = relative(from, file);\n    return file;\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      // istanbul ignore next\n      path = path.replace(/\\\\/g, '/');\n    }\n\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent);\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from);\n    } else if (this.mapOpts.absolute) {\n      if (pathToFileURL) {\n        return pathToFileURL(node.source.input.from).toString();\n      } else {\n        // istanbul ignore next\n        throw new Error('`map.absolute` option is not available in this PostCSS build');\n      }\n    } else {\n      return this.toUrl(this.path(node.source.input.from));\n    }\n  }\n\n  generateString() {\n    this.css = '';\n    this.map = new SourceMapGenerator({\n      file: this.outputFile()\n    });\n    let line = 1;\n    let column = 1;\n    let noSource = '<no source>';\n    let mapping = {\n      source: '',\n      generated: {\n        line: 0,\n        column: 0\n      },\n      original: {\n        line: 0,\n        column: 0\n      }\n    };\n    let lines, last;\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str;\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line;\n        mapping.generated.column = column - 1;\n\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node);\n          mapping.original.line = node.source.start.line;\n          mapping.original.column = node.source.start.column - 1;\n          this.map.addMapping(mapping);\n        } else {\n          mapping.source = noSource;\n          mapping.original.line = 1;\n          mapping.original.column = 0;\n          this.map.addMapping(mapping);\n        }\n      }\n\n      lines = str.match(/\\n/g);\n\n      if (lines) {\n        line += lines.length;\n        last = str.lastIndexOf('\\n');\n        column = str.length - last;\n      } else {\n        column += str.length;\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || {\n          raws: {}\n        };\n\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node);\n            mapping.original.line = node.source.end.line;\n            mapping.original.column = node.source.end.column - 1;\n            mapping.generated.line = line;\n            mapping.generated.column = column - 2;\n            this.map.addMapping(mapping);\n          } else {\n            mapping.source = noSource;\n            mapping.original.line = 1;\n            mapping.original.column = 0;\n            mapping.generated.line = line;\n            mapping.generated.column = column - 1;\n            this.map.addMapping(mapping);\n          }\n        }\n      }\n    });\n  }\n\n  generate() {\n    this.clearAnnotation();\n\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap();\n    }\n\n    let result = '';\n    this.stringify(this.root, i => {\n      result += i;\n    });\n    return [result];\n  }\n\n}\n\nmodule.exports = MapGenerator;","map":{"version":3,"sources":["/home/swathi_vennela/Documents/Dev/WriterIo-1/BlogApp/frontend/node_modules/sanitize-html/node_modules/postcss/lib/map-generator.js"],"names":["dirname","resolve","relative","sep","require","pathToFileURL","SourceMapConsumer","SourceMapGenerator","sourceMapAvailable","Boolean","pathAvailable","MapGenerator","constructor","stringify","root","opts","mapOpts","map","isMap","previous","length","previousMaps","walk","node","source","input","includes","push","isInline","inline","annotation","some","i","isSourcesContent","sourcesContent","withContent","clearAnnotation","nodes","type","text","indexOf","removeChild","setSourcesContent","already","from","setSourceContent","toUrl","path","css","applyPrevMaps","prev","file","consumer","applySourceMap","isAnnotation","toBase64","str","Buffer","toString","window","btoa","unescape","encodeURIComponent","addAnnotation","content","to","outputFile","eol","generateMap","generateString","test","absolute","replace","encodeURI","sourcePath","Error","line","column","noSource","mapping","generated","original","lines","last","start","addMapping","match","lastIndexOf","p","parent","raws","semicolon","end","generate","result","module","exports"],"mappings":"AAAA;;AAEA,IAAI;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,OAAX;AAAoBC,EAAAA,QAApB;AAA8BC,EAAAA;AAA9B,IAAsCC,OAAO,CAAC,MAAD,CAAjD;;AACA,IAAI;AAAEC,EAAAA;AAAF,IAAoBD,OAAO,CAAC,KAAD,CAA/B;;AACA,IAAI;AAAEE,EAAAA,iBAAF;AAAqBC,EAAAA;AAArB,IAA4CH,OAAO,CAAC,YAAD,CAAvD;;AAEA,IAAII,kBAAkB,GAAGC,OAAO,CAACH,iBAAiB,IAAIC,kBAAtB,CAAhC;AACA,IAAIG,aAAa,GAAGD,OAAO,CAACT,OAAO,IAAIC,OAAX,IAAsBC,QAAtB,IAAkCC,GAAnC,CAA3B;;AAEA,MAAMQ,YAAN,CAAmB;AACjBC,EAAAA,WAAW,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwB;AACjC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKG,OAAL,GAAeD,IAAI,CAACE,GAAL,IAAY,EAA3B;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAEDG,EAAAA,KAAK,GAAG;AACN,QAAI,OAAO,KAAKH,IAAL,CAAUE,GAAjB,KAAyB,WAA7B,EAA0C;AACxC,aAAO,CAAC,CAAC,KAAKF,IAAL,CAAUE,GAAnB;AACD;;AACD,WAAO,KAAKE,QAAL,GAAgBC,MAAhB,GAAyB,CAAhC;AACD;;AAEDD,EAAAA,QAAQ,GAAG;AACT,QAAI,CAAC,KAAKE,YAAV,EAAwB;AACtB,WAAKA,YAAL,GAAoB,EAApB;AACA,WAAKP,IAAL,CAAUQ,IAAV,CAAeC,IAAI,IAAI;AACrB,YAAIA,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkBR,GAArC,EAA0C;AACxC,cAAIA,GAAG,GAAGM,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkBR,GAA5B;;AACA,cAAI,CAAC,KAAKI,YAAL,CAAkBK,QAAlB,CAA2BT,GAA3B,CAAL,EAAsC;AACpC,iBAAKI,YAAL,CAAkBM,IAAlB,CAAuBV,GAAvB;AACD;AACF;AACF,OAPD;AAQD;;AAED,WAAO,KAAKI,YAAZ;AACD;;AAEDO,EAAAA,QAAQ,GAAG;AACT,QAAI,OAAO,KAAKZ,OAAL,CAAaa,MAApB,KAA+B,WAAnC,EAAgD;AAC9C,aAAO,KAAKb,OAAL,CAAaa,MAApB;AACD;;AAED,QAAIC,UAAU,GAAG,KAAKd,OAAL,CAAac,UAA9B;;AACA,QAAI,OAAOA,UAAP,KAAsB,WAAtB,IAAqCA,UAAU,KAAK,IAAxD,EAA8D;AAC5D,aAAO,KAAP;AACD;;AAED,QAAI,KAAKX,QAAL,GAAgBC,MAApB,EAA4B;AAC1B,aAAO,KAAKD,QAAL,GAAgBY,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACH,MAA5B,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDI,EAAAA,gBAAgB,GAAG;AACjB,QAAI,OAAO,KAAKjB,OAAL,CAAakB,cAApB,KAAuC,WAA3C,EAAwD;AACtD,aAAO,KAAKlB,OAAL,CAAakB,cAApB;AACD;;AACD,QAAI,KAAKf,QAAL,GAAgBC,MAApB,EAA4B;AAC1B,aAAO,KAAKD,QAAL,GAAgBY,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACG,WAAF,EAA1B,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,QAAI,KAAKpB,OAAL,CAAac,UAAb,KAA4B,KAAhC,EAAuC;AAEvC,QAAIP,IAAJ;;AACA,SAAK,IAAIS,CAAC,GAAG,KAAKlB,IAAL,CAAUuB,KAAV,CAAgBjB,MAAhB,GAAyB,CAAtC,EAAyCY,CAAC,IAAI,CAA9C,EAAiDA,CAAC,EAAlD,EAAsD;AACpDT,MAAAA,IAAI,GAAG,KAAKT,IAAL,CAAUuB,KAAV,CAAgBL,CAAhB,CAAP;AACA,UAAIT,IAAI,CAACe,IAAL,KAAc,SAAlB,EAA6B;;AAC7B,UAAIf,IAAI,CAACgB,IAAL,CAAUC,OAAV,CAAkB,qBAAlB,MAA6C,CAAjD,EAAoD;AAClD,aAAK1B,IAAL,CAAU2B,WAAV,CAAsBT,CAAtB;AACD;AACF;AACF;;AAEDU,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,OAAO,GAAG,EAAd;AACA,SAAK7B,IAAL,CAAUQ,IAAV,CAAeC,IAAI,IAAI;AACrB,UAAIA,IAAI,CAACC,MAAT,EAAiB;AACf,YAAIoB,IAAI,GAAGrB,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkBmB,IAA7B;;AACA,YAAIA,IAAI,IAAI,CAACD,OAAO,CAACC,IAAD,CAApB,EAA4B;AAC1BD,UAAAA,OAAO,CAACC,IAAD,CAAP,GAAgB,IAAhB;AACA,eAAK3B,GAAL,CAAS4B,gBAAT,CACE,KAAKC,KAAL,CAAW,KAAKC,IAAL,CAAUH,IAAV,CAAX,CADF,EAEErB,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkBuB,GAFpB;AAID;AACF;AACF,KAXD;AAYD;;AAEDC,EAAAA,aAAa,GAAG;AACd,SAAK,IAAIC,IAAT,IAAiB,KAAK/B,QAAL,EAAjB,EAAkC;AAChC,UAAIyB,IAAI,GAAG,KAAKE,KAAL,CAAW,KAAKC,IAAL,CAAUG,IAAI,CAACC,IAAf,CAAX,CAAX;AACA,UAAIrC,IAAI,GAAGoC,IAAI,CAACpC,IAAL,IAAad,OAAO,CAACkD,IAAI,CAACC,IAAN,CAA/B;AACA,UAAIlC,GAAJ;;AAEA,UAAI,KAAKD,OAAL,CAAakB,cAAb,KAAgC,KAApC,EAA2C;AACzCjB,QAAAA,GAAG,GAAG,IAAIX,iBAAJ,CAAsB4C,IAAI,CAACX,IAA3B,CAAN;;AACA,YAAItB,GAAG,CAACiB,cAAR,EAAwB;AACtBjB,UAAAA,GAAG,CAACiB,cAAJ,GAAqBjB,GAAG,CAACiB,cAAJ,CAAmBjB,GAAnB,CAAuB,MAAM,IAA7B,CAArB;AACD;AACF,OALD,MAKO;AACLA,QAAAA,GAAG,GAAGiC,IAAI,CAACE,QAAL,EAAN;AACD;;AAED,WAAKnC,GAAL,CAASoC,cAAT,CAAwBpC,GAAxB,EAA6B2B,IAA7B,EAAmC,KAAKE,KAAL,CAAW,KAAKC,IAAL,CAAUjC,IAAV,CAAX,CAAnC;AACD;AACF;;AAEDwC,EAAAA,YAAY,GAAG;AACb,QAAI,KAAK1B,QAAL,EAAJ,EAAqB;AACnB,aAAO,IAAP;AACD;;AACD,QAAI,OAAO,KAAKZ,OAAL,CAAac,UAApB,KAAmC,WAAvC,EAAoD;AAClD,aAAO,KAAKd,OAAL,CAAac,UAApB;AACD;;AACD,QAAI,KAAKX,QAAL,GAAgBC,MAApB,EAA4B;AAC1B,aAAO,KAAKD,QAAL,GAAgBY,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACF,UAA5B,CAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDyB,EAAAA,QAAQ,CAACC,GAAD,EAAM;AACZ,QAAIC,MAAJ,EAAY;AACV,aAAOA,MAAM,CAACb,IAAP,CAAYY,GAAZ,EAAiBE,QAAjB,CAA0B,QAA1B,CAAP;AACD,KAFD,MAEO;AACL;AACA,aAAOC,MAAM,CAACC,IAAP,CAAYC,QAAQ,CAACC,kBAAkB,CAACN,GAAD,CAAnB,CAApB,CAAP;AACD;AACF;;AAEDO,EAAAA,aAAa,GAAG;AACd,QAAIC,OAAJ;;AAEA,QAAI,KAAKpC,QAAL,EAAJ,EAAqB;AACnBoC,MAAAA,OAAO,GACL,kCAAkC,KAAKT,QAAL,CAAc,KAAKtC,GAAL,CAASyC,QAAT,EAAd,CADpC;AAED,KAHD,MAGO,IAAI,OAAO,KAAK1C,OAAL,CAAac,UAApB,KAAmC,QAAvC,EAAiD;AACtDkC,MAAAA,OAAO,GAAG,KAAKhD,OAAL,CAAac,UAAvB;AACD,KAFM,MAEA,IAAI,OAAO,KAAKd,OAAL,CAAac,UAApB,KAAmC,UAAvC,EAAmD;AACxDkC,MAAAA,OAAO,GAAG,KAAKhD,OAAL,CAAac,UAAb,CAAwB,KAAKf,IAAL,CAAUkD,EAAlC,EAAsC,KAAKnD,IAA3C,CAAV;AACD,KAFM,MAEA;AACLkD,MAAAA,OAAO,GAAG,KAAKE,UAAL,KAAoB,MAA9B;AACD;;AAED,QAAIC,GAAG,GAAG,IAAV;AACA,QAAI,KAAKnB,GAAL,CAAStB,QAAT,CAAkB,MAAlB,CAAJ,EAA+ByC,GAAG,GAAG,MAAN;AAE/B,SAAKnB,GAAL,IAAYmB,GAAG,GAAG,uBAAN,GAAgCH,OAAhC,GAA0C,KAAtD;AACD;;AAEDE,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKnD,IAAL,CAAUkD,EAAd,EAAkB;AAChB,aAAO,KAAKlB,IAAL,CAAU,KAAKhC,IAAL,CAAUkD,EAApB,CAAP;AACD;;AACD,QAAI,KAAKlD,IAAL,CAAU6B,IAAd,EAAoB;AAClB,aAAO,KAAKG,IAAL,CAAU,KAAKhC,IAAL,CAAU6B,IAApB,CAAP;AACD;;AACD,WAAO,QAAP;AACD;;AAEDwB,EAAAA,WAAW,GAAG;AACZ,SAAKC,cAAL;AACA,QAAI,KAAKpC,gBAAL,EAAJ,EAA6B,KAAKS,iBAAL;AAC7B,QAAI,KAAKvB,QAAL,GAAgBC,MAAhB,GAAyB,CAA7B,EAAgC,KAAK6B,aAAL;AAChC,QAAI,KAAKK,YAAL,EAAJ,EAAyB,KAAKS,aAAL;;AAEzB,QAAI,KAAKnC,QAAL,EAAJ,EAAqB;AACnB,aAAO,CAAC,KAAKoB,GAAN,CAAP;AACD;;AACD,WAAO,CAAC,KAAKA,GAAN,EAAW,KAAK/B,GAAhB,CAAP;AACD;;AAED8B,EAAAA,IAAI,CAACI,IAAD,EAAO;AACT,QAAIA,IAAI,CAACX,OAAL,CAAa,GAAb,MAAsB,CAA1B,EAA6B,OAAOW,IAAP;AAC7B,QAAI,YAAYmB,IAAZ,CAAiBnB,IAAjB,CAAJ,EAA4B,OAAOA,IAAP;AAC5B,QAAI,KAAKnC,OAAL,CAAauD,QAAjB,EAA2B,OAAOpB,IAAP;AAE3B,QAAIP,IAAI,GAAG,KAAK7B,IAAL,CAAUkD,EAAV,GAAejE,OAAO,CAAC,KAAKe,IAAL,CAAUkD,EAAX,CAAtB,GAAuC,GAAlD;;AAEA,QAAI,OAAO,KAAKjD,OAAL,CAAac,UAApB,KAAmC,QAAvC,EAAiD;AAC/Cc,MAAAA,IAAI,GAAG5C,OAAO,CAACC,OAAO,CAAC2C,IAAD,EAAO,KAAK5B,OAAL,CAAac,UAApB,CAAR,CAAd;AACD;;AAEDqB,IAAAA,IAAI,GAAGjD,QAAQ,CAAC0C,IAAD,EAAOO,IAAP,CAAf;AACA,WAAOA,IAAP;AACD;;AAEDL,EAAAA,KAAK,CAACC,IAAD,EAAO;AACV,QAAI5C,GAAG,KAAK,IAAZ,EAAkB;AAChB;AACA4C,MAAAA,IAAI,GAAGA,IAAI,CAACyB,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACD;;AACD,WAAOC,SAAS,CAAC1B,IAAD,CAAT,CAAgByB,OAAhB,CAAwB,OAAxB,EAAiCV,kBAAjC,CAAP;AACD;;AAEDY,EAAAA,UAAU,CAACnD,IAAD,EAAO;AACf,QAAI,KAAKP,OAAL,CAAa4B,IAAjB,EAAuB;AACrB,aAAO,KAAKE,KAAL,CAAW,KAAK9B,OAAL,CAAa4B,IAAxB,CAAP;AACD,KAFD,MAEO,IAAI,KAAK5B,OAAL,CAAauD,QAAjB,EAA2B;AAChC,UAAIlE,aAAJ,EAAmB;AACjB,eAAOA,aAAa,CAACkB,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkBmB,IAAnB,CAAb,CAAsCc,QAAtC,EAAP;AACD,OAFD,MAEO;AACL;AACA,cAAM,IAAIiB,KAAJ,CACJ,8DADI,CAAN;AAGD;AACF,KATM,MASA;AACL,aAAO,KAAK7B,KAAL,CAAW,KAAKC,IAAL,CAAUxB,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkBmB,IAA5B,CAAX,CAAP;AACD;AACF;;AAEDyB,EAAAA,cAAc,GAAG;AACf,SAAKrB,GAAL,GAAW,EAAX;AACA,SAAK/B,GAAL,GAAW,IAAIV,kBAAJ,CAAuB;AAAE4C,MAAAA,IAAI,EAAE,KAAKe,UAAL;AAAR,KAAvB,CAAX;AAEA,QAAIU,IAAI,GAAG,CAAX;AACA,QAAIC,MAAM,GAAG,CAAb;AAEA,QAAIC,QAAQ,GAAG,aAAf;AACA,QAAIC,OAAO,GAAG;AACZvD,MAAAA,MAAM,EAAE,EADI;AAEZwD,MAAAA,SAAS,EAAE;AAAEJ,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,MAAM,EAAE;AAAnB,OAFC;AAGZI,MAAAA,QAAQ,EAAE;AAAEL,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,MAAM,EAAE;AAAnB;AAHE,KAAd;AAMA,QAAIK,KAAJ,EAAWC,IAAX;AACA,SAAKtE,SAAL,CAAe,KAAKC,IAApB,EAA0B,CAAC0C,GAAD,EAAMjC,IAAN,EAAYe,IAAZ,KAAqB;AAC7C,WAAKU,GAAL,IAAYQ,GAAZ;;AAEA,UAAIjC,IAAI,IAAIe,IAAI,KAAK,KAArB,EAA4B;AAC1ByC,QAAAA,OAAO,CAACC,SAAR,CAAkBJ,IAAlB,GAAyBA,IAAzB;AACAG,QAAAA,OAAO,CAACC,SAAR,CAAkBH,MAAlB,GAA2BA,MAAM,GAAG,CAApC;;AACA,YAAItD,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACC,MAAL,CAAY4D,KAA/B,EAAsC;AACpCL,UAAAA,OAAO,CAACvD,MAAR,GAAiB,KAAKkD,UAAL,CAAgBnD,IAAhB,CAAjB;AACAwD,UAAAA,OAAO,CAACE,QAAR,CAAiBL,IAAjB,GAAwBrD,IAAI,CAACC,MAAL,CAAY4D,KAAZ,CAAkBR,IAA1C;AACAG,UAAAA,OAAO,CAACE,QAAR,CAAiBJ,MAAjB,GAA0BtD,IAAI,CAACC,MAAL,CAAY4D,KAAZ,CAAkBP,MAAlB,GAA2B,CAArD;AACA,eAAK5D,GAAL,CAASoE,UAAT,CAAoBN,OAApB;AACD,SALD,MAKO;AACLA,UAAAA,OAAO,CAACvD,MAAR,GAAiBsD,QAAjB;AACAC,UAAAA,OAAO,CAACE,QAAR,CAAiBL,IAAjB,GAAwB,CAAxB;AACAG,UAAAA,OAAO,CAACE,QAAR,CAAiBJ,MAAjB,GAA0B,CAA1B;AACA,eAAK5D,GAAL,CAASoE,UAAT,CAAoBN,OAApB;AACD;AACF;;AAEDG,MAAAA,KAAK,GAAG1B,GAAG,CAAC8B,KAAJ,CAAU,KAAV,CAAR;;AACA,UAAIJ,KAAJ,EAAW;AACTN,QAAAA,IAAI,IAAIM,KAAK,CAAC9D,MAAd;AACA+D,QAAAA,IAAI,GAAG3B,GAAG,CAAC+B,WAAJ,CAAgB,IAAhB,CAAP;AACAV,QAAAA,MAAM,GAAGrB,GAAG,CAACpC,MAAJ,GAAa+D,IAAtB;AACD,OAJD,MAIO;AACLN,QAAAA,MAAM,IAAIrB,GAAG,CAACpC,MAAd;AACD;;AAED,UAAIG,IAAI,IAAIe,IAAI,KAAK,OAArB,EAA8B;AAC5B,YAAIkD,CAAC,GAAGjE,IAAI,CAACkE,MAAL,IAAe;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAvB;;AACA,YAAInE,IAAI,CAACe,IAAL,KAAc,MAAd,IAAwBf,IAAI,KAAKiE,CAAC,CAACL,IAAnC,IAA2CK,CAAC,CAACE,IAAF,CAAOC,SAAtD,EAAiE;AAC/D,cAAIpE,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACC,MAAL,CAAYoE,GAA/B,EAAoC;AAClCb,YAAAA,OAAO,CAACvD,MAAR,GAAiB,KAAKkD,UAAL,CAAgBnD,IAAhB,CAAjB;AACAwD,YAAAA,OAAO,CAACE,QAAR,CAAiBL,IAAjB,GAAwBrD,IAAI,CAACC,MAAL,CAAYoE,GAAZ,CAAgBhB,IAAxC;AACAG,YAAAA,OAAO,CAACE,QAAR,CAAiBJ,MAAjB,GAA0BtD,IAAI,CAACC,MAAL,CAAYoE,GAAZ,CAAgBf,MAAhB,GAAyB,CAAnD;AACAE,YAAAA,OAAO,CAACC,SAAR,CAAkBJ,IAAlB,GAAyBA,IAAzB;AACAG,YAAAA,OAAO,CAACC,SAAR,CAAkBH,MAAlB,GAA2BA,MAAM,GAAG,CAApC;AACA,iBAAK5D,GAAL,CAASoE,UAAT,CAAoBN,OAApB;AACD,WAPD,MAOO;AACLA,YAAAA,OAAO,CAACvD,MAAR,GAAiBsD,QAAjB;AACAC,YAAAA,OAAO,CAACE,QAAR,CAAiBL,IAAjB,GAAwB,CAAxB;AACAG,YAAAA,OAAO,CAACE,QAAR,CAAiBJ,MAAjB,GAA0B,CAA1B;AACAE,YAAAA,OAAO,CAACC,SAAR,CAAkBJ,IAAlB,GAAyBA,IAAzB;AACAG,YAAAA,OAAO,CAACC,SAAR,CAAkBH,MAAlB,GAA2BA,MAAM,GAAG,CAApC;AACA,iBAAK5D,GAAL,CAASoE,UAAT,CAAoBN,OAApB;AACD;AACF;AACF;AACF,KAhDD;AAiDD;;AAEDc,EAAAA,QAAQ,GAAG;AACT,SAAKzD,eAAL;;AAEA,QAAI1B,aAAa,IAAIF,kBAAjB,IAAuC,KAAKU,KAAL,EAA3C,EAAyD;AACvD,aAAO,KAAKkD,WAAL,EAAP;AACD;;AAED,QAAI0B,MAAM,GAAG,EAAb;AACA,SAAKjF,SAAL,CAAe,KAAKC,IAApB,EAA0BkB,CAAC,IAAI;AAC7B8D,MAAAA,MAAM,IAAI9D,CAAV;AACD,KAFD;AAGA,WAAO,CAAC8D,MAAD,CAAP;AACD;;AA/RgB;;AAkSnBC,MAAM,CAACC,OAAP,GAAiBrF,YAAjB","sourcesContent":["'use strict'\n\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      this.root.walk(node => {\n        if (node.source && node.source.input.map) {\n          let map = node.source.input.map\n          if (!this.previousMaps.includes(map)) {\n            this.previousMaps.push(map)\n          }\n        }\n      })\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    let node\n    for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n      node = this.root.nodes[i]\n      if (node.type !== 'comment') continue\n      if (node.text.indexOf('# sourceMappingURL=') === 0) {\n        this.root.removeChild(i)\n      }\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    this.root.walk(node => {\n      if (node.source) {\n        let from = node.source.input.from\n        if (from && !already[from]) {\n          already[from] = true\n          this.map.setSourceContent(\n            this.toUrl(this.path(from)),\n            node.source.input.css\n          )\n        }\n      }\n    })\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      // istanbul ignore next\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    }\n    if (this.opts.from) {\n      return this.path(this.opts.from)\n    }\n    return 'to.css'\n  }\n\n  generateMap() {\n    this.generateString()\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    }\n    return [this.css, this.map]\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      // istanbul ignore next\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.mapOpts.absolute) {\n      if (pathToFileURL) {\n        return pathToFileURL(node.source.input.from).toString()\n      } else {\n        // istanbul ignore next\n        throw new Error(\n          '`map.absolute` option is not available in this PostCSS build'\n        )\n      }\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    }\n\n    let result = ''\n    this.stringify(this.root, i => {\n      result += i\n    })\n    return [result]\n  }\n}\n\nmodule.exports = MapGenerator\n"]},"metadata":{},"sourceType":"script"}