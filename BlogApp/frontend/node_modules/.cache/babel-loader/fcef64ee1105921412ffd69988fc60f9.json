{"ast":null,"code":"var _jsxFileName = \"/home/swathi_vennela/Documents/Dev/WriterIo-1/BlogApp/frontend/src/components/Post.js\";\nimport React, { Component, lazy, Suspense } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import alert css\n\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nconst CommentList = lazy(() => import(\"./CommentList\")); // The same post component is used in the Postslist component and to SHOW the individual post component\n\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\n\nconst RenderLoader = () => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"spinner-container\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"spinner-border\",\n  role: \"status\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  className: \"sr-only\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 13\n  }\n}, \"Loading...\")));\n\nclass Post extends Component {\n  constructor(props) {\n    // When all the Posts has to to be showed, the \"post\" prop is recieved from the Postslist compnent\n    super(props);\n    this.state = {\n      post: {},\n      isLoggedIn: false,\n      readingTime: 0\n    };\n    this.deletePost = this.deletePost.bind(this);\n    this.confirmDelete = this.confirmDelete.bind(this);\n  }\n\n  componentDidMount() {\n    // If this component is rendered to SHOW individual Post component, make an API call to get that individual post\n    if (!this.props.post) {\n      axios.get(`${baseURL}/server/posts/${this.props.match.params.id}`).then(response => {\n        this.setState({\n          post: response.data\n        }); // Set the reading time for the post\n\n        if (this.state.post) {\n          const wordsPerMinute = 200; //average rate;\n\n          const noOfWords = this.state.post.body.split(\" \").length;\n\n          if (noOfWords) {\n            const readingTime = Math.floor(noOfWords / wordsPerMinute);\n            this.setState({\n              readingTime: readingTime\n            });\n          }\n        } // Remove display of loader\n\n\n        document.querySelector(\".spinner-border\").style.display = \"none\"; // Set the 'post' class display to block\n\n        document.querySelector(\".post\").style.display = \"block\";\n      }).catch(err => console.error(err));\n    }\n  } // Check if the correct user is logged in to display the edit and delete buttons\n\n\n  componentDidUpdate() {\n    if (sessionStorage.getItem(\"isLoggedIn\") === \"true\" && this.state.post.author === sessionStorage.getItem(\"username\")) {\n      this.setState(prevState => {\n        if (!prevState.isLoggedIn) {\n          return {\n            isLoggedIn: true\n          };\n        }\n      });\n    }\n  } // React-conform-alert to delete a post\n\n\n  confirmDelete(id) {\n    confirmAlert({\n      title: \"Confirm to delete this post.\",\n      message: \"Are you sure you want to do this?\",\n      buttons: [{\n        label: \"YES\",\n        onClick: () => this.deletePost(id)\n      }, {\n        label: \"NO  \",\n        onClick: () => console.log(\"NO! I don't want to delete this magnificant piece of art!\")\n      }]\n    });\n  }\n\n  deletePost(id) {\n    axios.delete(`${baseURL}/server/posts/${id}`).then(res => console.log(res.data)).catch(err => console.error(err));\n    window.location = \"/posts\";\n  }\n\n  render() {\n    // When the posts are being rendered as a part of the PostsList component\n    if (this.props.post) {\n      // Store the date that needs to be displayed\n      let date = new Date(this.props.post.date).toDateString();\n      let displayMonth = date.substring(4, 10);\n      let displayYear = date.substring(10);\n      let displayDate = `${displayMonth},${displayYear}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-body\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: \"/posts/\" + this.props.post._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"post-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }\n      }, this.props.post.title), /*#__PURE__*/React.createElement(\"h5\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"author\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 33\n        }\n      }, this.props.post.author)), /*#__PURE__*/React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: this.props.post.body.substring(0, 400).trim() + \"...\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"small\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"time\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 41\n        }\n      }, \"Published on \"), displayDate))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }\n      }))));\n    } // To render the SHOW page for all the individual posts\n    else {\n        // Store the date that needs to be displayed\n        let date = new Date(this.state.post.date).toDateString();\n        let displayMonth = date.substring(4, 10);\n        let displayYear = date.substring(10);\n        let displayDate = `${displayMonth},${displayYear}`;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"spinner-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"spinner-border\",\n          role: \"status\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"sr-only\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }\n        }, \"Loading...\"))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"post\",\n          style: {\n            display: \"none\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"card\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"card-body\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          className: \"post-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 33\n          }\n        }, this.state.post.title), /*#__PURE__*/React.createElement(\"h3\", {\n          className: \"author\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 33\n          }\n        }, this.state.post.author), /*#__PURE__*/React.createElement(\"time\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 41\n          }\n        }, \"Published on \"), displayDate), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"read-time\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 37\n          }\n        }, \"~ \", this.state.readingTime, \" min read\")), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"post-body\",\n          dangerouslySetInnerHTML: {\n            __html: this.state.post.body\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 33\n          }\n        }), this.state.isLoggedIn ? /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Link, {\n          to: `/posts/${this.state.post._id}/edit`,\n          className: \"btn btn-outline-primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 41\n          }\n        }, \"Edit\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n          onClick: () => this.confirmDelete(this.state.post._id),\n          className: \"btn btn-outline-danger\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 41\n          }\n        }, \"Delete\")) : \" \")), /*#__PURE__*/React.createElement(Suspense, {\n          fallback: RenderLoader(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(CommentList, {\n          post: this.state.post,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 29\n          }\n        }))));\n      }\n  }\n\n}\n\nPost.propTypes = {\n  post: PropTypes.object\n};\nexport default Post;","map":{"version":3,"sources":["/home/swathi_vennela/Documents/Dev/WriterIo-1/BlogApp/frontend/src/components/Post.js"],"names":["React","Component","lazy","Suspense","Link","confirmAlert","axios","PropTypes","CommentList","baseURL","process","env","REACT_APP_BASEURL","RenderLoader","Post","constructor","props","state","post","isLoggedIn","readingTime","deletePost","bind","confirmDelete","componentDidMount","get","match","params","id","then","response","setState","data","wordsPerMinute","noOfWords","body","split","length","Math","floor","document","querySelector","style","display","catch","err","console","error","componentDidUpdate","sessionStorage","getItem","author","prevState","title","message","buttons","label","onClick","log","delete","res","window","location","render","date","Date","toDateString","displayMonth","substring","displayYear","displayDate","_id","__html","trim","propTypes","object"],"mappings":"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","sourcesContent":["import React, { Component, lazy, Suspense } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import alert css\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nconst CommentList = lazy(() => import(\"./CommentList\"));\n\n// The same post component is used in the Postslist component and to SHOW the individual post component\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\nconst RenderLoader = () => (\n    <div className=\"spinner-container\">\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    </div>\n);\n\nclass Post extends Component {\n    constructor(props) {\n        // When all the Posts has to to be showed, the \"post\" prop is recieved from the Postslist compnent\n        super(props);\n        this.state = { post: {}, isLoggedIn: false, readingTime: 0 };\n\n        this.deletePost = this.deletePost.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n    }\n\n    componentDidMount() {\n        // If this component is rendered to SHOW individual Post component, make an API call to get that individual post\n        if (!this.props.post) {\n            axios\n                .get(`${baseURL}/server/posts/${this.props.match.params.id}`)\n                .then((response) => {\n                    this.setState({ post: response.data });\n                    // Set the reading time for the post\n                    if (this.state.post) {\n                        const wordsPerMinute = 200; //average rate;\n                        const noOfWords = this.state.post.body.split(\" \")\n                            .length;\n                        if (noOfWords) {\n                            const readingTime = Math.floor(\n                                noOfWords / wordsPerMinute\n                            );\n                            this.setState({ readingTime: readingTime });\n                        }\n                    }\n\n                    // Remove display of loader\n                    document.querySelector(\".spinner-border\").style.display =\n                        \"none\";\n                    // Set the 'post' class display to block\n                    document.querySelector(\".post\").style.display = \"block\";\n                })\n                .catch((err) => console.error(err));\n        }\n    }\n\n    // Check if the correct user is logged in to display the edit and delete buttons\n    componentDidUpdate() {\n        if (\n            sessionStorage.getItem(\"isLoggedIn\") === \"true\" &&\n            this.state.post.author === sessionStorage.getItem(\"username\")\n        ) {\n            this.setState((prevState) => {\n                if (!prevState.isLoggedIn) {\n                    return { isLoggedIn: true };\n                }\n            });\n        }\n    }\n\n    // React-conform-alert to delete a post\n    confirmDelete(id) {\n        confirmAlert({\n            title: \"Confirm to delete this post.\",\n            message: \"Are you sure you want to do this?\",\n            buttons: [\n                {\n                    label: \"YES\",\n                    onClick: () => this.deletePost(id),\n                },\n                {\n                    label: \"NO  \",\n                    onClick: () =>\n                        console.log(\n                            \"NO! I don't want to delete this magnificant piece of art!\"\n                        ),\n                },\n            ],\n        });\n    }\n\n    deletePost(id) {\n        axios\n            .delete(`${baseURL}/server/posts/${id}`)\n            .then((res) => console.log(res.data))\n            .catch((err) => console.error(err));\n\n        window.location = \"/posts\";\n    }\n\n    render() {\n        // When the posts are being rendered as a part of the PostsList component\n        if (this.props.post) {\n            // Store the date that needs to be displayed\n            let date = new Date(this.props.post.date).toDateString();\n            let displayMonth = date.substring(4, 10);\n            let displayYear = date.substring(10);\n            let displayDate = `${displayMonth},${displayYear}`;\n\n            return (\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <Link to={\"/posts/\" + this.props.post._id}>\n                            <h1 className=\"post-title\">\n                                {this.props.post.title}\n                            </h1>\n                            <h5>\n                                <span className=\"author\">\n                                    {this.props.post.author}\n                                </span>\n                            </h5>\n\n                            <div\n                                dangerouslySetInnerHTML={{\n                                    __html:\n                                        this.props.post.body\n                                            .substring(0, 400)\n                                            .trim() + \"...\",\n                                }}\n                            ></div>\n\n                            <small>\n                                <time>\n                                    <div>\n                                        <span>Published on </span>\n                                        {displayDate}\n                                    </div>\n                                </time>\n                            </small>\n                            <br />\n                        </Link>\n                    </div>\n                </div>\n            );\n        }\n        // To render the SHOW page for all the individual posts\n        else {\n            // Store the date that needs to be displayed\n            let date = new Date(this.state.post.date).toDateString();\n            let displayMonth = date.substring(4, 10);\n            let displayYear = date.substring(10);\n            let displayDate = `${displayMonth},${displayYear}`;\n            return (\n                <div>\n                    {/* A spinner to indicate loading, until the post is available in state */}\n                    <div className=\"spinner-container\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n\n                    {/* The post component that's hidden from view until the state is updated with the content */}\n                    <div className=\"post\" style={{ display: \"none\" }}>\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <h1 className=\"post-title\">\n                                    {this.state.post.title}\n                                </h1>\n                                <h3 className=\"author\">\n                                    {this.state.post.author}\n                                </h3>\n                                <time>\n                                    <div>\n                                        <span>Published on </span>\n                                        {displayDate}\n                                    </div>\n\n                                    <span className=\"read-time\">\n                                        ~ {this.state.readingTime} min read\n                                    </span>\n                                </time>\n                                <div\n                                    className=\"post-body\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: this.state.post.body,\n                                    }}\n                                ></div>\n                                {/* Display the 'Edit' and 'Delete' buttons only if the correct user is logged in */}\n                                {this.state.isLoggedIn ? (\n                                    <span>\n                                        <Link\n                                            to={`/posts/${this.state.post._id}/edit`}\n                                            className=\"btn btn-outline-primary\"\n                                        >\n                                            Edit\n                                        </Link>{\" \"}\n                                        <button\n                                            onClick={() =>\n                                                this.confirmDelete(\n                                                    this.state.post._id\n                                                )\n                                            }\n                                            className=\"btn btn-outline-danger\"\n                                        >\n                                            Delete\n                                        </button>\n                                    </span>\n                                ) : (\n                                    \" \"\n                                )}\n                            </div>\n                        </div>\n                        {/* Render the comments below the post */}\n                        <Suspense fallback={RenderLoader()}>\n                            <CommentList post={this.state.post} />\n                        </Suspense>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nPost.propTypes = {\n    post: PropTypes.object,\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}