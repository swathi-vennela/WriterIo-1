{"ast":null,"code":"'use strict';\n\nlet {\n  existsSync,\n  readFileSync\n} = require('fs');\n\nlet {\n  dirname,\n  join\n} = require('path');\n\nlet {\n  SourceMapConsumer,\n  SourceMapGenerator\n} = require('source-map');\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString();\n  } else {\n    // istanbul ignore next\n    return window.atob(str);\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return;\n    this.loadAnnotation(css);\n    this.inline = this.startWith(this.annotation, 'data:');\n    let prev = opts.map ? opts.map.prev : undefined;\n    let text = this.loadMap(opts.from, prev);\n\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from;\n    }\n\n    if (this.mapFile) this.root = dirname(this.mapFile);\n    if (text) this.text = text;\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text);\n    }\n\n    return this.consumerCache;\n  }\n\n  withContent() {\n    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n  }\n\n  startWith(string, start) {\n    if (!string) return false;\n    return string.substr(0, start.length) === start;\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.match(/\\/\\*\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\*\\//)[1].trim();\n  }\n\n  loadAnnotation(css) {\n    let annotations = css.match(/\\/\\*\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\*\\//gm);\n\n    if (annotations && annotations.length > 0) {\n      // Locate the last sourceMappingURL to avoid picking up\n      // sourceMappingURLs from comments, strings, etc.\n      let lastAnnotation = annotations[annotations.length - 1];\n\n      if (lastAnnotation) {\n        this.annotation = this.getAnnotationURL(lastAnnotation);\n      }\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/;\n    let baseUri = /^data:application\\/json;base64,/;\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/;\n    let uri = /^data:application\\/json,/;\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length));\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length));\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n    throw new Error('Unsupported source map encoding ' + encoding);\n  }\n\n  loadFile(path) {\n    this.root = dirname(path);\n\n    if (existsSync(path)) {\n      this.mapFile = path;\n      return readFileSync(path, 'utf-8').toString().trim();\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false;\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev;\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file);\n\n        if (prevPath) {\n          let map = this.loadFile(prevPath);\n\n          if (!map) {\n            throw new Error('Unable to load previous source map: ' + prevPath.toString());\n          }\n\n          return map;\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString();\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString();\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev);\n      } else {\n        throw new Error('Unsupported previous source map format: ' + prev.toString());\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation);\n    } else if (this.annotation) {\n      let map = this.annotation;\n      if (file) map = join(dirname(file), map);\n      return this.loadFile(map);\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false;\n    return typeof map.mappings === 'string' || typeof map._mappings === 'string' || Array.isArray(map.sections);\n  }\n\n}\n\nmodule.exports = PreviousMap;\nPreviousMap.default = PreviousMap;","map":{"version":3,"sources":["/home/swathi_vennela/Documents/Dev/WriterIo-1/BlogApp/frontend/node_modules/sanitize-html/node_modules/postcss/lib/previous-map.js"],"names":["existsSync","readFileSync","require","dirname","join","SourceMapConsumer","SourceMapGenerator","fromBase64","str","Buffer","from","toString","window","atob","PreviousMap","constructor","css","opts","map","loadAnnotation","inline","startWith","annotation","prev","undefined","text","loadMap","mapFile","root","consumer","consumerCache","withContent","sourcesContent","length","string","start","substr","getAnnotationURL","sourceMapString","match","trim","annotations","lastAnnotation","decodeInline","baseCharsetUri","baseUri","charsetUri","uri","test","decodeURIComponent","RegExp","lastMatch","encoding","Error","loadFile","path","file","prevPath","fromSourceMap","isMap","JSON","stringify","mappings","_mappings","Array","isArray","sections","module","exports","default"],"mappings":"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","sourcesContent":["'use strict'\n\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    // istanbul ignore next\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString\n      .match(/\\/\\*\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\*\\//)[1]\n      .trim()\n  }\n\n  loadAnnotation(css) {\n    let annotations = css.match(\n      /\\/\\*\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\*\\//gm\n    )\n\n    if (annotations && annotations.length > 0) {\n      // Locate the last sourceMappingURL to avoid picking up\n      // sourceMappingURLs from comments, strings, etc.\n      let lastAnnotation = annotations[annotations.length - 1]\n      if (lastAnnotation) {\n        this.annotation = this.getAnnotationURL(lastAnnotation)\n      }\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n"]},"metadata":{},"sourceType":"script"}