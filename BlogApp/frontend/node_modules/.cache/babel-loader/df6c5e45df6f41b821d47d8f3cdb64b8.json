{"ast":null,"code":"'use strict';\n\nlet {\n  red,\n  bold,\n  gray,\n  options: colorette\n} = require('colorette');\n\nlet terminalHighlight = require('./terminal-highlight');\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message);\n    this.name = 'CssSyntaxError';\n    this.reason = message;\n\n    if (file) {\n      this.file = file;\n    }\n\n    if (source) {\n      this.source = source;\n    }\n\n    if (plugin) {\n      this.plugin = plugin;\n    }\n\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      this.line = line;\n      this.column = column;\n    }\n\n    this.setMessage();\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError);\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : '';\n    this.message += this.file ? this.file : '<css input>';\n\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column;\n    }\n\n    this.message += ': ' + this.reason;\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return '';\n    let css = this.source;\n    if (color == null) color = colorette.enabled;\n\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css);\n    }\n\n    let lines = css.split(/\\r?\\n/);\n    let start = Math.max(this.line - 3, 0);\n    let end = Math.min(this.line + 2, lines.length);\n    let maxWidth = String(end).length;\n    let mark, aside;\n\n    if (color) {\n      mark = text => bold(red(text));\n\n      aside = text => gray(text);\n    } else {\n      mark = aside = str => str;\n    }\n\n    return lines.slice(start, end).map((line, index) => {\n      let number = start + 1 + index;\n      let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';\n\n      if (number === this.line) {\n        let spacing = aside(gutter.replace(/\\d/g, ' ')) + line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ');\n        return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^');\n      }\n\n      return ' ' + aside(gutter) + line;\n    }).join('\\n');\n  }\n\n  toString() {\n    let code = this.showSourceCode();\n\n    if (code) {\n      code = '\\n\\n' + code + '\\n';\n    }\n\n    return this.name + ': ' + this.message + code;\n  }\n\n}\n\nmodule.exports = CssSyntaxError;\nCssSyntaxError.default = CssSyntaxError;","map":{"version":3,"sources":["/home/swathi_vennela/Documents/Dev/WriterIo-1/BlogApp/frontend/node_modules/sanitize-html/node_modules/postcss/lib/css-syntax-error.js"],"names":["red","bold","gray","options","colorette","require","terminalHighlight","CssSyntaxError","Error","constructor","message","line","column","source","file","plugin","name","reason","setMessage","captureStackTrace","showSourceCode","color","css","enabled","lines","split","start","Math","max","end","min","length","maxWidth","String","mark","aside","text","str","slice","map","index","number","gutter","spacing","replace","join","toString","code","module","exports","default"],"mappings":"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","sourcesContent":["'use strict'\n\nlet { red, bold, gray, options: colorette } = require('colorette')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      this.line = line\n      this.column = column\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = colorette.enabled\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n"]},"metadata":{},"sourceType":"script"}