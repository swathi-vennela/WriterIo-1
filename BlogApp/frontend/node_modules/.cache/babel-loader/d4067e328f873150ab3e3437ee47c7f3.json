{"ast":null,"code":"'use strict';\n\nlet LazyResult = require('./lazy-result');\n\nlet Root = require('./root');\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.2.14';\n    this.plugins = this.normalize(plugins);\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]));\n    return this;\n  }\n\n  process(css, opts = {}) {\n    if (this.plugins.length === 0 && opts.parser === opts.stringifier && !opts.hideNothingWarning) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn('You did not set any plugins, parser, or stringifier. ' + 'Right now, PostCSS does nothing. Pick plugins for your case ' + 'on https://www.postcss.parts/ and use them in postcss.config.js.');\n        }\n      }\n    }\n\n    return new LazyResult(this, css, opts);\n  }\n\n  normalize(plugins) {\n    let normalized = [];\n\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i();\n      } else if (i.postcss) {\n        i = i.postcss;\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins);\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i);\n      } else if (typeof i === 'function') {\n        normalized.push(i);\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error('PostCSS syntaxes cannot be used as plugins. Instead, please use ' + 'one of the syntax/parser/stringifier options as outlined ' + 'in your PostCSS runner documentation.');\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin');\n      }\n    }\n\n    return normalized;\n  }\n\n}\n\nmodule.exports = Processor;\nProcessor.default = Processor;\nRoot.registerProcessor(Processor);","map":{"version":3,"sources":["/home/swathi_vennela/Documents/Dev/WriterIo-1/BlogApp/frontend/node_modules/sanitize-html/node_modules/postcss/lib/processor.js"],"names":["LazyResult","require","Root","Processor","constructor","plugins","version","normalize","use","plugin","concat","process","css","opts","length","parser","stringifier","hideNothingWarning","env","NODE_ENV","console","warn","normalized","i","postcss","Array","isArray","postcssPlugin","push","parse","stringify","Error","module","exports","default","registerProcessor"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AAEA,MAAME,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB,SAAKC,OAAL,GAAe,QAAf;AACA,SAAKD,OAAL,GAAe,KAAKE,SAAL,CAAeF,OAAf,CAAf;AACD;;AAEDG,EAAAA,GAAG,CAACC,MAAD,EAAS;AACV,SAAKJ,OAAL,GAAe,KAAKA,OAAL,CAAaK,MAAb,CAAoB,KAAKH,SAAL,CAAe,CAACE,MAAD,CAAf,CAApB,CAAf;AACA,WAAO,IAAP;AACD;;AAEDE,EAAAA,OAAO,CAACC,GAAD,EAAMC,IAAI,GAAG,EAAb,EAAiB;AACtB,QACE,KAAKR,OAAL,CAAaS,MAAb,KAAwB,CAAxB,IACAD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACG,WADrB,IAEA,CAACH,IAAI,CAACI,kBAHR,EAIE;AACA,UAAIN,OAAO,CAACO,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,YAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,CAACC,IAA9C,EAAoD;AAClDD,UAAAA,OAAO,CAACC,IAAR,CACE,0DACE,8DADF,GAEE,kEAHJ;AAKD;AACF;AACF;;AACD,WAAO,IAAIrB,UAAJ,CAAe,IAAf,EAAqBY,GAArB,EAA0BC,IAA1B,CAAP;AACD;;AAEDN,EAAAA,SAAS,CAACF,OAAD,EAAU;AACjB,QAAIiB,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAT,IAAclB,OAAd,EAAuB;AACrB,UAAIkB,CAAC,CAACC,OAAF,KAAc,IAAlB,EAAwB;AACtBD,QAAAA,CAAC,GAAGA,CAAC,EAAL;AACD,OAFD,MAEO,IAAIA,CAAC,CAACC,OAAN,EAAe;AACpBD,QAAAA,CAAC,GAAGA,CAAC,CAACC,OAAN;AACD;;AAED,UAAI,OAAOD,CAAP,KAAa,QAAb,IAAyBE,KAAK,CAACC,OAAN,CAAcH,CAAC,CAAClB,OAAhB,CAA7B,EAAuD;AACrDiB,QAAAA,UAAU,GAAGA,UAAU,CAACZ,MAAX,CAAkBa,CAAC,CAAClB,OAApB,CAAb;AACD,OAFD,MAEO,IAAI,OAAOkB,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACI,aAA/B,EAA8C;AACnDL,QAAAA,UAAU,CAACM,IAAX,CAAgBL,CAAhB;AACD,OAFM,MAEA,IAAI,OAAOA,CAAP,KAAa,UAAjB,EAA6B;AAClCD,QAAAA,UAAU,CAACM,IAAX,CAAgBL,CAAhB;AACD,OAFM,MAEA,IAAI,OAAOA,CAAP,KAAa,QAAb,KAA0BA,CAAC,CAACM,KAAF,IAAWN,CAAC,CAACO,SAAvC,CAAJ,EAAuD;AAC5D,YAAInB,OAAO,CAACO,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,gBAAM,IAAIY,KAAJ,CACJ,qEACE,2DADF,GAEE,uCAHE,CAAN;AAKD;AACF,OARM,MAQA;AACL,cAAM,IAAIA,KAAJ,CAAUR,CAAC,GAAG,0BAAd,CAAN;AACD;AACF;;AACD,WAAOD,UAAP;AACD;;AA1Da;;AA6DhBU,MAAM,CAACC,OAAP,GAAiB9B,SAAjB;AACAA,SAAS,CAAC+B,OAAV,GAAoB/B,SAApB;AAEAD,IAAI,CAACiC,iBAAL,CAAuBhC,SAAvB","sourcesContent":["'use strict'\n\nlet LazyResult = require('./lazy-result')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.2.14'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      opts.parser === opts.stringifier &&\n      !opts.hideNothingWarning\n    ) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof console !== 'undefined' && console.warn) {\n          console.warn(\n            'You did not set any plugins, parser, or stringifier. ' +\n              'Right now, PostCSS does nothing. Pick plugins for your case ' +\n              'on https://www.postcss.parts/ and use them in postcss.config.js.'\n          )\n        }\n      }\n    }\n    return new LazyResult(this, css, opts)\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\n"]},"metadata":{},"sourceType":"script"}