{"ast":null,"code":"'use strict';\n\nlet MapGenerator = require('./map-generator');\n\nlet {\n  isClean\n} = require('./symbols');\n\nlet stringify = require('./stringify');\n\nlet warnOnce = require('./warn-once');\n\nlet Result = require('./result');\n\nlet parse = require('./parse');\n\nlet Root = require('./root');\n\nconst TYPE_TO_CLASS_NAME = {\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n};\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  OnceExit: true\n};\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n};\nconst CHILDREN = 0;\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function';\n}\n\nfunction getEvents(node) {\n  let key = false;\n  let type = TYPE_TO_CLASS_NAME[node.type];\n\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase();\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase();\n  }\n\n  if (key && node.append) {\n    return [type, type + '-' + key, CHILDREN, type + 'Exit', type + 'Exit-' + key];\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key];\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit'];\n  } else {\n    return [type, type + 'Exit'];\n  }\n}\n\nfunction toStack(node) {\n  let events;\n\n  if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit'];\n  } else {\n    events = getEvents(node);\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  };\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false;\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i));\n  return node;\n}\n\nlet postcss = {};\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false;\n    this.processed = false;\n    let root;\n\n    if (typeof css === 'object' && css !== null && css.type === 'root') {\n      root = cleanMarks(css);\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root);\n\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {};\n        if (!opts.map.inline) opts.map.inline = false;\n        opts.map.prev = css.map;\n      }\n    } else {\n      let parser = parse;\n      if (opts.syntax) parser = opts.syntax.parse;\n      if (opts.parser) parser = opts.parser;\n      if (parser.parse) parser = parser.parse;\n\n      try {\n        root = parser(css, opts);\n      } catch (error) {\n        this.processed = true;\n        this.error = error;\n      }\n    }\n\n    this.result = new Result(processor, root, opts);\n    this.helpers = { ...postcss,\n      result: this.result,\n      postcss\n    };\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin,\n          ...plugin.prepare(this.result)\n        };\n      } else {\n        return plugin;\n      }\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult';\n  }\n\n  get processor() {\n    return this.result.processor;\n  }\n\n  get opts() {\n    return this.result.opts;\n  }\n\n  get css() {\n    return this.stringify().css;\n  }\n\n  get content() {\n    return this.stringify().content;\n  }\n\n  get map() {\n    return this.stringify().map;\n  }\n\n  get root() {\n    return this.sync().root;\n  }\n\n  get messages() {\n    return this.sync().messages;\n  }\n\n  warnings() {\n    return this.sync().warnings();\n  }\n\n  toString() {\n    return this.css;\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce('Without `from` option PostCSS could generate wrong source map ' + 'and will not find Browserslist config. Set it to CSS file path ' + 'or to `undefined` to prevent this warning.');\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected);\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected);\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally);\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error);\n    if (this.processed) return Promise.resolve(this.result);\n\n    if (!this.processing) {\n      this.processing = this.runAsync();\n    }\n\n    return this.processing;\n  }\n\n  sync() {\n    if (this.error) throw this.error;\n    if (this.processed) return this.result;\n    this.processed = true;\n\n    if (this.processing) {\n      throw this.getAsyncError();\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin);\n\n      if (isPromise(promise)) {\n        throw this.getAsyncError();\n      }\n    }\n\n    this.prepareVisitors();\n\n    if (this.hasListener) {\n      let root = this.result.root;\n\n      while (!root[isClean]) {\n        root[isClean] = true;\n        this.walkSync(root);\n      }\n\n      if (this.listeners.OnceExit) {\n        this.visitSync(this.listeners.OnceExit, root);\n      }\n    }\n\n    return this.result;\n  }\n\n  stringify() {\n    if (this.error) throw this.error;\n    if (this.stringified) return this.result;\n    this.stringified = true;\n    this.sync();\n    let opts = this.result.opts;\n    let str = stringify;\n    if (opts.syntax) str = opts.syntax.stringify;\n    if (opts.stringifier) str = opts.stringifier;\n    if (str.stringify) str = str.stringify;\n    let map = new MapGenerator(str, this.result.root, this.result.opts);\n    let data = map.generate();\n    this.result.css = data[0];\n    this.result.map = data[1];\n    return this.result;\n  }\n\n  walkSync(node) {\n    node[isClean] = true;\n    let events = getEvents(node);\n\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child);\n          });\n        }\n      } else {\n        let visitors = this.listeners[event];\n\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return;\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin;\n      let promise;\n\n      try {\n        promise = visitor(node, this.helpers);\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf);\n      }\n\n      if (node.type !== 'root' && !node.parent) return true;\n\n      if (isPromise(promise)) {\n        throw this.getAsyncError();\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin;\n\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        return plugin.Once(this.result.root, this.helpers);\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result);\n      }\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins');\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin;\n\n    try {\n      if (node) node.addToError(error);\n      this.error = error;\n\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin;\n        error.setMessage();\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin;\n          let pluginVer = plugin.postcssVersion;\n          let runtimeVer = this.result.processor.version;\n          let a = pluginVer.split('.');\n          let b = runtimeVer.split('.');\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            console.error('Unknown error from PostCSS plugin. Your current PostCSS ' + 'version is ' + runtimeVer + ', but ' + pluginName + ' uses ' + pluginVer + '. Perhaps this is the source of the error below.');\n          }\n        }\n      }\n    } catch (err) {\n      // istanbul ignore next\n      if (console && console.error) console.error(err);\n    }\n\n    return error;\n  }\n\n  async runAsync() {\n    this.plugin = 0;\n\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i];\n      let promise = this.runOnRoot(plugin);\n\n      if (isPromise(promise)) {\n        try {\n          await promise;\n        } catch (error) {\n          throw this.handleError(error);\n        }\n      }\n    }\n\n    this.prepareVisitors();\n\n    if (this.hasListener) {\n      let root = this.result.root;\n\n      while (!root[isClean]) {\n        root[isClean] = true;\n        let stack = [toStack(root)];\n\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack);\n\n          if (isPromise(promise)) {\n            try {\n              await promise;\n            } catch (e) {\n              let node = stack[stack.length - 1].node;\n              throw this.handleError(e, node);\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin;\n\n          try {\n            await visitor(root, this.helpers);\n          } catch (e) {\n            throw this.handleError(e);\n          }\n        }\n      }\n    }\n\n    this.processed = true;\n    return this.stringify();\n  }\n\n  prepareVisitors() {\n    this.listeners = {};\n\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = [];\n      this.listeners[type].push([plugin, cb]);\n    };\n\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(`Unknown event ${event} in ${plugin.postcssPlugin}. ` + `Try to update PostCSS (${this.processor.version} now).`);\n          }\n\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter]);\n                } else {\n                  add(plugin, event + '-' + filter.toLowerCase(), plugin[event][filter]);\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event]);\n            }\n          }\n        }\n      }\n    }\n\n    this.hasListener = Object.keys(this.listeners).length > 0;\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1];\n    let {\n      node,\n      visitors\n    } = visit;\n\n    if (node.type !== 'root' && !node.parent) {\n      stack.pop();\n      return;\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex];\n      visit.visitorIndex += 1;\n\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = [];\n        visit.visitorIndex = 0;\n      }\n\n      this.result.lastPlugin = plugin;\n\n      try {\n        return visitor(node.toProxy(), this.helpers);\n      } catch (e) {\n        throw this.handleError(e, node);\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator;\n      let child;\n\n      while (child = node.nodes[node.indexes[iterator]]) {\n        node.indexes[iterator] += 1;\n\n        if (!child[isClean]) {\n          child[isClean] = true;\n          stack.push(toStack(child));\n          return;\n        }\n      }\n\n      visit.iterator = 0;\n      delete node.indexes[iterator];\n    }\n\n    let events = visit.events;\n\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex];\n      visit.eventIndex += 1;\n\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true;\n          visit.iterator = node.getIterator();\n        }\n\n        return;\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event];\n        return;\n      }\n    }\n\n    stack.pop();\n  }\n\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant;\n};\n\nmodule.exports = LazyResult;\nLazyResult.default = LazyResult;\nRoot.registerLazyResult(LazyResult);","map":{"version":3,"sources":["/home/swathi_vennela/Documents/Dev/WriterIo-1/BlogApp/frontend/node_modules/sanitize-html/node_modules/postcss/lib/lazy-result.js"],"names":["MapGenerator","require","isClean","stringify","warnOnce","Result","parse","Root","TYPE_TO_CLASS_NAME","root","atrule","rule","decl","comment","PLUGIN_PROPS","postcssPlugin","prepare","Once","Declaration","Rule","AtRule","Comment","DeclarationExit","RuleExit","AtRuleExit","CommentExit","RootExit","OnceExit","NOT_VISITORS","CHILDREN","isPromise","obj","then","getEvents","node","key","type","prop","toLowerCase","name","append","toStack","events","eventIndex","visitors","visitorIndex","iterator","cleanMarks","nodes","forEach","i","postcss","LazyResult","constructor","processor","css","opts","stringified","processed","map","inline","prev","parser","syntax","error","result","helpers","plugins","plugin","Symbol","toStringTag","content","sync","messages","warnings","toString","onFulfilled","onRejected","process","env","NODE_ENV","async","catch","finally","onFinally","Promise","reject","resolve","processing","runAsync","getAsyncError","promise","runOnRoot","prepareVisitors","hasListener","walkSync","listeners","visitSync","str","stringifier","data","generate","event","each","child","toProxy","visitor","lastPlugin","e","handleError","proxyOf","parent","Error","addToError","setMessage","postcssVersion","pluginName","pluginVer","runtimeVer","version","a","split","b","parseInt","console","err","length","stack","visitTick","add","cb","push","test","filter","Object","keys","visit","pop","indexes","getIterator","registerPostcss","dependant","module","exports","default","registerLazyResult"],"mappings":"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","sourcesContent":["'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet { isClean } = require('./symbols')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (typeof css === 'object' && css !== null && css.type === 'root') {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        this.visitSync(this.listeners.OnceExit, root)\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && !node.parent) return true\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      // istanbul ignore next\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            await visitor(root, this.helpers)\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\n"]},"metadata":{},"sourceType":"script"}