{"ast":null,"code":"var _jsxFileName = \"/home/swathi_vennela/Documents/Dev/WriterIo-1/BlogApp/frontend/src/components/CommentList.js\";\nimport React, { Component, lazy, Suspense } from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nconst Comment = lazy(() => import(\"./Comment\"));\n\nconst Filter = require(\"bad-words\"); // A NSFW filter for censoring the comments\n\n\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\n\nconst renderLoader = () => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"spinner-container\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  className: \"spinner-border\",\n  role: \"status\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"span\", {\n  className: \"sr-only\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 13\n  }\n}, \"Loading...\")));\n\nclass CommentList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      body: \"\",\n      imgs: [],\n      comments: [],\n      noOfComments: 5\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  } //The post prop can take a while to arrive therefore cannot use componentDidMount\n\n\n  componentDidUpdate(prevProps) {\n    if (this.props.post !== prevProps.post) this.setState({\n      comments: this.props.post.comments\n    });\n  }\n\n  handleChange(event) {\n    // Store comment body in  the state\n    const {\n      value\n    } = event.target;\n    this.setState({\n      body: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); // Submit comment only if it doesn't have only whitespaces\n\n    if (this.state.body.trim()) {\n      const {\n        body\n      } = this.state;\n      const filter = new Filter();\n      const filteredComment = filter.clean(body); // Store new comments at the beginning of the array, to display in reverse chronological order\n\n      this.setState({\n        comments: this.state.comments.unshift(filteredComment)\n      });\n      let updatedPost = this.props.post;\n      updatedPost.comments = this.state.comments;\n      axios.post(`${baseURL}/server/posts/edit/${this.props.post._id}`, updatedPost).then(res => window.location.reload()).catch(err => console.log(err));\n    } else {\n      alert(\"Cannot submit empty comment.\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"comment-heading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, \"Latest Comments\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"full-stop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 36\n      }\n    }, \".\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, this.state.comments.length ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }, this.state.comments.slice(0, this.state.noOfComments).map((currentcomment, index) => /*#__PURE__*/React.createElement(Suspense, {\n      key: index,\n      fallback: renderLoader(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Comment, {\n      comment: currentcomment,\n      img: `${index * 9}` // img prop is used in generating jdenticon and requires a random string to generate the avatar\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 41\n      }\n    })))) : /*#__PURE__*/React.createElement(\"h4\", {\n      id: \"first-comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, \"Be the first person to comment on this post\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"full-stop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }, \".\")), this.state.comments[this.state.noOfComments] ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-link\",\n      onClick: () => this.setState(prevState => ({\n        noOfComments: prevState.noOfComments + 5\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    }, \"Load More Comments...\") : \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      type: \"text\",\n      onChange: this.handleChange,\n      placeholder: \"Start typing your comment...\",\n      value: this.state.body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"btn btn-outline-success\",\n      value: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n} // PropTypes\n\n\nCommentList.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentList;","map":{"version":3,"sources":["/home/swathi_vennela/Documents/Dev/WriterIo-1/BlogApp/frontend/src/components/CommentList.js"],"names":["React","Component","lazy","Suspense","axios","PropTypes","Comment","Filter","require","baseURL","process","env","REACT_APP_BASEURL","renderLoader","CommentList","constructor","props","state","body","imgs","comments","noOfComments","handleSubmit","bind","handleChange","componentDidUpdate","prevProps","post","setState","event","value","target","preventDefault","trim","filter","filteredComment","clean","unshift","updatedPost","_id","then","res","window","location","reload","catch","err","console","log","alert","render","length","slice","map","currentcomment","index","prevState","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component, lazy, Suspense } from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nconst Comment = lazy(() => import(\"./Comment\"));\nconst Filter = require(\"bad-words\"); // A NSFW filter for censoring the comments\n\nconst baseURL = process.env.REACT_APP_BASEURL || \"http://localhost:5000\";\nconst renderLoader = () => (\n    <div className=\"spinner-container\">\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    </div>\n);\n\nclass CommentList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            body: \"\",\n            imgs: [],\n            comments: [],\n            noOfComments: 5,\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    //The post prop can take a while to arrive therefore cannot use componentDidMount\n    componentDidUpdate(prevProps) {\n        if (this.props.post !== prevProps.post)\n            this.setState({ comments: this.props.post.comments });\n    }\n\n    handleChange(event) {\n        // Store comment body in  the state\n        const { value } = event.target;\n        this.setState({\n            body: value,\n        });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        // Submit comment only if it doesn't have only whitespaces\n        if (this.state.body.trim()) {\n            const { body } = this.state;\n            const filter = new Filter();\n\n            const filteredComment = filter.clean(body);\n\n            // Store new comments at the beginning of the array, to display in reverse chronological order\n            this.setState({\n                comments: this.state.comments.unshift(filteredComment),\n            });\n\n            let updatedPost = this.props.post;\n            updatedPost.comments = this.state.comments;\n\n            axios\n                .post(\n                    `${baseURL}/server/posts/edit/${this.props.post._id}`,\n                    updatedPost\n                )\n                .then((res) => window.location.reload())\n                .catch((err) => console.log(err));\n        } else {\n            alert(\"Cannot submit empty comment.\");\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"comment-list\">\n                <hr />\n                <h5 className=\"comment-heading\">\n                    Latest Comments<span className=\"full-stop\">.</span>\n                </h5>\n                <br />\n                <div>\n                    {/* Render comments in reverse chronological order */}\n                    {this.state.comments.length ? (\n                        <div>\n                            {this.state.comments\n                                .slice(0, this.state.noOfComments)\n                                .map((currentcomment, index) => (\n                                    <Suspense\n                                        key={index}\n                                        fallback={renderLoader()}\n                                    >\n                                        <Comment\n                                            comment={currentcomment}\n                                            img={`${index * 9}`} // img prop is used in generating jdenticon and requires a random string to generate the avatar\n                                        />\n                                    </Suspense>\n                                ))}\n                        </div>\n                    ) : (\n                        <h4 id=\"first-comment\">\n                            Be the first person to comment on this post\n                            <span className=\"full-stop\">.</span>\n                        </h4>\n                    )}\n\n                    {/* The 'Load more comments' button's implementation */}\n                    {/* This sets state, which in turn re-renders the list of comments */}\n                    {this.state.comments[this.state.noOfComments] ? (\n                        <button\n                            className=\"btn btn-link\"\n                            onClick={() =>\n                                this.setState((prevState) => ({\n                                    noOfComments: prevState.noOfComments + 5,\n                                }))\n                            }\n                        >\n                            Load More Comments...\n                        </button>\n                    ) : (\n                        \" \"\n                    )}\n                </div>\n\n                <div className=\"comment-form\">\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"form-group\">\n                            <input\n                                className=\"form-control\"\n                                type=\"text\"\n                                onChange={this.handleChange}\n                                placeholder=\"Start typing your comment...\"\n                                value={this.state.body}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"submit\"\n                                className=\"btn btn-outline-success\"\n                                value=\"comment\"\n                            />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\n// PropTypes\nCommentList.propTypes = {\n    post: PropTypes.object.isRequired,\n};\n\nexport default CommentList;\n"]},"metadata":{},"sourceType":"module"}